import type { ChildProcessByStdio } from "child_process";
import type { Readable } from "stream";
/**
 * Initialize logging by wrapping all console methods to write to logs file
 */
export declare function initializeLogging(): void;
/**
 * Reset console methods to their original state
 */
export declare function resetLogging(): void;
/**
 * Capture and log child process output
 */
export declare function setupChildProcessLogging(childProcess: ChildProcessByStdio<null, Readable, Readable>, prefix: string): void;
/**
 * Display intro message with logging
 */
export declare const intro: (message: string) => void;
/**
 * Wrapped clack logging methods with file logging
 */
export declare const log: {
    info: (message: string) => void;
    success: (message: string) => void;
    error: (message: string) => void;
    warn: (message: string) => void;
    step: (message: string) => void;
    message: (message?: string, { symbol }?: import("@clack/prompts").LogMessageOptions) => void;
    warning: (message: string) => void;
};
/**
 * Display outro message with logging
 */
export declare const outro: (message: string) => void;
/**
 * Reads logs with pagination
 * @param nextToken Line number to start reading from (0-indexed)
 * @param limit Number of lines to read
 * @returns Object containing logs array and next token
 */
export declare const readLogs: (nextToken?: number, limit?: number) => {
    logs: string[];
    nextToken: number | null;
};

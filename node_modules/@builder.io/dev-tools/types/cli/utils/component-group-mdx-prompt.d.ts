export declare const COMPONENT_GROUP_MDX_PROMPT = "# Component Group Documentation Generation\n\n## Objective\nGenerate comprehensive MDX documentation for a specific component group, analyzing their interfaces, relationships, and usage patterns using only the relevant files provided in the input.\n\n## Instructions\n\n### 1. Component Analysis\nFor the given component group, analyze each relevant file by:\n- **Interface examination** - Extract and document all props, their types, and descriptions\n- **Usage pattern analysis** - Identify how components work together\n- **Relationship mapping** - Document dependencies and coupling between components\n- **Example extraction** - Find real usage examples from the codebase\n\n### 2. Documentation Structure\nCreate comprehensive documentation covering:\n- **Group overview** - Purpose and architectural decisions\n- **Component interfaces** - Detailed prop documentation\n- **Usage examples** - Practical code examples\n- **Best practices** - Recommended usage patterns\n\n## Required Output Format\n\nGenerate an MDX file with this structure:\n\n```mdx\n---\ntitle: \"{{GROUP_NAME}} Components\"\ndescription: \"{{GROUP_DESCRIPTION}}\"\ncomponents: [{{COMPONENT_LIST}}]\nrelevantFiles: [{{FILE_LIST}}]\n---\n\n# {{GROUP_NAME}} Components\n\n## Overview\n[Detailed description of the component group, its purpose, and architectural decisions]\n\n## Components\n\n### [Component1Name]\n\n**Interface:**\n```typescript\ninterface [Component1]Props {\n  // Document all props with types and descriptions\n  property: string; // Description of what this prop does\n  onAction?: () => void; // Optional callback description\n}\n```\n\n**Usage Example:**\n```tsx\nimport { [Component1] } from '@cloudscape-design/components';\n\nfunction Example() {\n  return (\n    <[Component1]\n      property=\"value\"\n      onAction={() => console.log('action')}\n    >\n      Content\n    </[Component1]>\n  );\n}\n```\n\n### [Component2Name]\n[Repeat structure for each component]\n\n## Component Relationships\n\n[Explain how components in this group work together, including:]\n- Shared contexts or state\n- Compositional patterns\n- Data flow between components\n- Common usage combinations\n\n## Best Practices\n\n- [Practice 1: Specific recommendation]\n- [Practice 2: Another recommendation]\n- [Practice 3: Usage pattern guidance]\n\n## Common Patterns\n\n### Pattern 1: [Pattern Name]\n```tsx\n// Example of common usage pattern\n<[ParentComponent]>\n  <[ChildComponent1] />\n  <[ChildComponent2] />\n</[ParentComponent]>\n```\n\n### Pattern 2: [Another Pattern]\n```tsx\n// Another common pattern\n```\n\n## Related Groups\n\n- [Link to related component groups]\n- [Cross-references to components used together]\n```\n\n## File Generation Requirements\n\n**File Naming:**\n- Use kebab-case derived from group name: `{{GROUP_NAME_KEBAB}}.mdx`\n- Place in `repo-indexing/` folder\n- Example: `repo-indexing/{{GROUP_NAME_KEBAB}}.mdx`\n\n**Content Requirements:**\n1. **Extract real interfaces** - Don't create placeholder interfaces, extract actual TypeScript interfaces from the codebase\n2. **Include practical examples** - Use realistic, working code examples\n3. **Document all props** - Include type information, default values, and descriptions\n4. **Explain relationships** - Focus on how components work together within the group\n5. **Provide context** - Explain architectural decisions and design patterns\n\n**Quality Standards:**\n- All code examples must be syntactically correct\n- Interface documentation must match actual component props\n- Examples should demonstrate real-world usage scenarios\n- Include accessibility considerations where relevant\n\n## Input Format\nYou will receive a single component group object:\n```json\n{\n  \"name\": \"{{GROUP_NAME}}\", \n  \"description\": \"{{GROUP_DESCRIPTION}}\",\n  \"components\": [{{COMPONENT_LIST}}],\n  \"relevantFiles\": [{{FILE_LIST}}]\n}\n```\n\n## Output\nReturn only the complete MDX file content, ready to be saved as `repo-indexing/{{GROUP_NAME_KEBAB}}.mdx`";

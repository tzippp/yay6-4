import type { DevToolsSys } from "../types";
import type { CLIArgs } from "./index";
export interface CredentialsOptions {
    forceSpaceId?: string;
    builderPublicKey?: boolean;
    builderPrivateKey?: boolean;
    figmaAuth?: boolean;
    force?: boolean;
}
export interface FigmaAuth {
    access_token: string;
    oauth: boolean;
}
export type Feature = "component-mapping";
export interface BuilderCodegenUsage {
    total: number | undefined;
    fast: number | undefined;
    quality: number | undefined;
    features?: Feature[];
    limits?: {
        aiGeneration: number;
        aiGenerationContextWindow: number;
    };
}
export interface BuilderAuth {
    privateKey: string;
    spaceId: string;
    spaceName: string;
    userId: string;
}
export interface Credentials {
    figmaAuth?: FigmaAuth;
    builderPublicKey?: string;
    builderPrivateKey?: string;
    spaceName?: string;
    userId?: string;
}
export declare const isCI: (args: CLIArgs) => boolean;
export interface Credentials {
    figmaAuth?: FigmaAuth;
    builderPublicKey?: string;
    builderPrivateKey?: string;
    spaceName?: string;
    userId?: string;
}
export declare const getCredentials: (sys: DevToolsSys, args: CLIArgs, opts: CredentialsOptions) => Promise<Credentials>;
export declare function getFigmaAuth(sys: DevToolsSys): Promise<FigmaAuth>;
export declare function getBuilderCodegenUsage(builderPublicKey: string, builderPrivateKey: string): Promise<BuilderCodegenUsage>;
export declare function getBuilderAuth(sys: DevToolsSys, preferSpaceId?: string): Promise<BuilderAuth>;
